#include<stdio.h>
#include<stdlib.h>
void fcfs(int n,int initial,int req[])
{
int i,seek=0;
for(i=0;i<n;i++)
{
seek=seek+abs(initial-req[i]);
initial=req[i];
}
printf("Total seek for fcfs:%d\n",seek);
}
void scan(int n,int initial,int req[],int move,int track)
{
int temp=0,i,j,seek=0;
for(i=0;i<n;i++)
{
for(j=0;j<n-i-1;j++)
{
if(req[j]>req[j+1])
{
temp=req[j];
req[j]=req[j+1];
req[j+1]=temp;
}
}
}
int index=0;
for(i=0;i<n;i++)
{
if(req[i]>initial)
{
index=i;
break;
}
}
if(move==1)
{
for(i=index;i<n;i++)
{
seek+=abs(initial=req[i]);
initial=req[i];
}
if(index!=0)
{
seek+=abs(initial-(track-1));
}
initial=track-1;
for(i=index-1;i>=0;i--)
{
seek+=abs(initial-req[i]);
initial=req[i];
}
}
else
{
for(i=index-1;i>=0;i--)
{
seek+=abs(initial-req[i]);
initial=req[i];
}
if(index!=n)
{
seek+=abs(initial-0);
}
initial=0;
for(i=index;i<n;i++)
{
seek+=abs(initial-req[i]);
initial=req[i];
}
}
printf("Total seek for scan:%d\n",seek);
}
void cscan(int n,int initial,int req[],int move,int track)
{
int temp,i,j,seek=0;
for(i=0;i<n;i++)
{
for(j=0;j<n-i-1;j++)
{
if(req[j]>req[j+1])
{
temp=req[j];
req[j]=req[j+1];
req[j+1]=temp;
}
}
}
int index=0;
for(i=0;i<n;i++)
{
if(req[i]>initial)
{
index=i;
break;
}
}
if(move==1)
{
for(i=index;i<n;i++)
{
seek+=abs(initial=req[i]);
initial=req[i];
}
seek+=abs(initial-track-1);
seek+=abs(track-1-0);
initial=0;
for(i=0;i<n;i++)
{
seek+=abs(initial-req[i]);
initial=req[i];
}
}
else
{
for(i=index-1;i>=0;i--)
{
seek+=abs(initial-req[i]);
initial=req[i];
}
seek+=abs(initial-0);
seek+=abs(track-1-0);
initial=track-1;
for(i=n-1;i>=index;i--)
{
seek+=abs(initial-req[i]);
initial=req[i];
}
}
printf("Total seek for cscan:%d\n",seek);
}
void main()
{
int n,i,move,track,initial;
printf("Enter the no of requests:");
scanf("%d",&n);
int req[n];
printf("Enter the requests:");
for(i=0;i<n;i++)
{
scanf("%d",&req[i]);
}
printf("Enter the initial position of the head:");
scanf("%d",&initial);
printf("Enter the no of tracks:");
scanf("%d",&track);
printf("Enter the direction(0/1):");
scanf("%d",&move);
fcfs(n,initial,req);
scan(n,initial,req,move,track);
cscan(n,initial,req,move,track);
}
