/*
First fit, best fit , and worst fit allocation strategies
*/

#include<stdio.h>
#include<stdlib.h>

void firstfit(int blocksize[],int m,int processsize[],int n)
{
   int i,j;
   int allocation[n];
   for(i=0;i<n;i++)
   {
        allocation[i]=-1;
   }
   for(i=0;i<n;i++)
   {
        for(j=0;j<m;j++)
        {
           if(blocksize[j]>=processsize[i])
           {
                allocation[i]=j;
                blocksize[j]-=processsize[i];
                break;
           }
        }
   }
printf("Process No:\tProcess Size\tBlock No.\n");
   for(i=0;i<n;i++)
   {
        printf("%i\t\t\t%i\t\t\t",i+1,processsize[i]);
        if(allocation[i]!=-1)
                printf("%i",allocation[i]+1);
        else
                printf("Not Allocated");

        printf("\n");
   }
}

void bestfit(int blocksize[],int m,int processsize[],int n)
{
int i,j;
int allocation[n];
for(i=0;i<n;i++)
{
   allocation[i]=-1;
}
for(i=0;i<n;i++)
{
   int bestidx=-1;
   for(j=0;j<m;j++)
   {
      if(blocksize[j]>=processsize[i])
      {
          if(bestidx==-1)
              bestidx=j;
          else if(blocksize[bestidx]>blocksize[j])
              bestidx=j;
      }
   }
   if(bestidx!=-1)
   {
        allocation[i]=bestidx;
        blocksize[bestidx]-=processsize[i];
   }
}

printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %d\t\t%d\t\t", i+1, processsize[i]);
        if (allocation[i] != -1)
            printf("%d", allocation[i] + 1);
        else
            printf("Not Allocated");
        printf("\n");
    }

}
void worstfit(int blocksize[],int m,int processsize[],int n)
{
   int i,j;
int allocation[n];
for(i=0;i<n;i++)
{
   allocation[i]=-1;
}
for(i=0;i<n;i++)
{
   int wstidx=-1;
   for(j=0;j<m;j++)
   {
        if(blocksize[j]>=processsize[i])
        {
           if(wstidx==-1||blocksize[wstidx]<blocksize[j])
           {
                wstidx=j;
           }
        }

   }
   if(wstidx!=-1)
   {
        allocation[i]=wstidx;
        blocksize[wstidx]-=processsize[i];
   }
}
printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %d\t\t%d\t\t", i + 1, processsize[i]);
        if (allocation[i] != -1)
        {
            printf("%d", allocation[i] + 1);
        }
        else
        {
            printf("Not Allocated");
        }
        printf("\n");
    }

}
void main()
{
   int i,m,n,blocksize[100],blksize[100],bsize[100],processsize[100],prosize[100],psize[100];
   printf("Enter the number of fixed Blocks");
   scanf("%d",&m);
   printf("Enter the Block sizes of %d blocks:",m);
   for(i=0;i<m;i++)
        scanf("%d",&blocksize[i]);

printf("Enter the number of process Blocks");
   scanf("%d",&n);
   printf("Enter the process sizes of %d blocks:",n);
   for(i=0;i<n;i++)
        scanf("%d",&processsize[i]);

for(i=0;i<m;i++)
   blksize[i]=blocksize[i];
for(i=0;i<m;i++)
   bsize[i]=blocksize[i];

for(i=0;i<n;i++)
   prosize[i]=processsize[i];
for(i=0;i<n;i++)
   psize[i]=processsize[i];

firstfit(blocksize, m, processsize, n);
bestfit(blksize, m, prosize, n);
worstfit(bsize, m, psize, n);
}

